/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _hotTable = __webpack_require__(1);

	var _hotTable2 = _interopRequireDefault(_hotTable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* Automatic generated by './build/bin/build-entry.js' */

	var components = [_hotTable2.default];

	var install = function install(Vue) {
	  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  /* istanbul ignore if */
	  if (install.installed) return;

	  components.map(function (component) {
	    Vue.component(component.name, component);
	  });
	};

	/* istanbul ignore if */
	if (typeof window !== 'undefined' && window.Vue) {
	  install(window.Vue);
	};

	module.exports = {
	  install: install,
	  hotTable: _hotTable2.default
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__vue_script__ = __webpack_require__(2)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] packages/hotTable/hotTable.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(7)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "_v-4d108f70/hotTable.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _handsontable = __webpack_require__(3);

	var _handsontable2 = _interopRequireDefault(_handsontable);

	var _settingsMapper = __webpack_require__(4);

	var _settingsMapper2 = _interopRequireDefault(_settingsMapper);

	var _jquery = __webpack_require__(5);

	var _jquery2 = _interopRequireDefault(_jquery);

	var _helpers = __webpack_require__(6);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  name: 'HotTable',
	  props: (0, _helpers.propFactory)(),
	  watch: (0, _helpers.propWatchFactory)(_helpers.updateHotSettings, _helpers.updateBulkHotSettings),
	  mounted: function mounted() {
	    return (0, _helpers.hotInit)(this);
	  },
	  beforeDestroy: function beforeDestroy() {
	    return (0, _helpers.hotDestroy)(this);
	  }
	};

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = Handsontable;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _handsontable = __webpack_require__(3);

	var _handsontable2 = _interopRequireDefault(_handsontable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SettingsMapper = function () {
	  function SettingsMapper() {
	    _classCallCheck(this, SettingsMapper);

	    this.registeredHooks = _handsontable2.default.hooks.getRegistered();
	  }

	  /**
	   * Prepare the `on`-property to be used in the Handsontable configuration.
	   *
	   * @param {String} property The name of the property, starting with `on`.
	   * @returns {String} The proper property name, with the `on` part trimmed.
	   */


	  _createClass(SettingsMapper, [{
	    key: 'prepareProp',
	    value: function prepareProp(property) {
	      return this.trimHookPrefix(property);
	    }

	    /**
	     * Prepare the settings object containing the `on`-properties to be used in the Handsontable configuration.
	     *
	     * @param {Object} settings An object containing the properties, including the `on`-prefixed hook names.
	     * @param {Object} additionalSettings An additional object containing the properties, including the `on`-prefixed hook names.
	     * @returns {Object} An object containing the properties, with the `on`-prefixes trimmed.
	     */

	  }, {
	    key: 'prepare',
	    value: function prepare(settings, additionalSettings) {
	      var newSettings = {};

	      for (var key in settings) {
	        if (settings.hasOwnProperty(key) && settings[key] !== void 0) {
	          newSettings[this.prepareProp(key)] = settings[key];
	        }
	      }

	      for (var _key in additionalSettings) {
	        if (additionalSettings.hasOwnProperty(_key) && additionalSettings[_key] !== void 0) {
	          newSettings[this.prepareProp(_key)] = additionalSettings[_key];
	        }
	      }

	      return newSettings;
	    }

	    /**
	     * Add the `on` prefix to the provided hook name.
	     *
	     * @param {String} prop Handsontable plugin hook name.
	     * @returns {String}
	     */

	  }, {
	    key: 'addHookPrefix',
	    value: function addHookPrefix(prop) {
	      if (this.registeredHooks.indexOf(prop) > -1) {
	        return 'on' + prop.charAt(0).toUpperCase() + prop.slice(1, prop.length);
	      }

	      return prop;
	    }

	    /**
	     * Trim the `on` hook prefix.
	     *
	     * @param {String} prop Settings property.
	     * @returns {String} Handsontable-compatible, prefix-less property name.
	     */

	  }, {
	    key: 'trimHookPrefix',
	    value: function trimHookPrefix(prop) {
	      if (prop.indexOf('on') === 0) {
	        var hookName = prop.charAt(2).toLowerCase() + prop.slice(3, prop.length);
	        if (this.registeredHooks.indexOf(hookName) > -1) {
	          return hookName;
	        }
	      }

	      // returns the string anyway, when we're sure all the hooks are registered, might be changed
	      return prop;
	    }
	  }]);

	  return SettingsMapper;
	}();

	exports.default = SettingsMapper;

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = jQuery;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.rewriteSettings = rewriteSettings;
	exports.hotInit = hotInit;
	exports.hotDestroy = hotDestroy;
	exports.propFactory = propFactory;
	exports.propWatchFactory = propWatchFactory;
	exports.updateHotSettings = updateHotSettings;
	exports.updateBulkHotSettings = updateBulkHotSettings;

	var _handsontable = __webpack_require__(3);

	var _handsontable2 = _interopRequireDefault(_handsontable);

	var _settingsMapper = __webpack_require__(4);

	var _settingsMapper2 = _interopRequireDefault(_settingsMapper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Rewrite the settings object passed to the watchers to be a clean array/object prepared to use withing Handsontable config.
	 *
	 * @param {*} observerSettings Watcher object containing the changed data.
	 * @returns {Object|Array}
	 */
	function rewriteSettings(observerSettings) {
	  var settings = null;
	  var type = {};

	  if (Object.prototype.toString.call(observerSettings).indexOf('Array') > -1) {
	    settings = [];
	    type.array = true;
	  } else if ((typeof observerSettings === 'undefined' ? 'undefined' : _typeof(observerSettings)) === 'object') {
	    settings = {};
	    type.object = true;
	  }

	  if (type.array || type.object) {
	    for (var p in observerSettings) {
	      if (observerSettings.hasOwnProperty(p)) {
	        settings[p] = observerSettings[p];
	      }
	    }
	  } else {
	    settings = observerSettings;
	  }

	  return settings;
	}

	/**
	 * Initialize Handsontable.
	 *
	 * @param {Object} vueInstance The Vue component instance object.
	 */
	function hotInit(vueInstance) {
	  var settingsMapper = new _settingsMapper2.default();
	  var unmappedSettings = [vueInstance.settings ? vueInstance.settings : vueInstance._props];

	  if (vueInstance.settings) {
	    unmappedSettings.push(vueInstance._props);
	  }

	  vueInstance.table = new _handsontable2.default(vueInstance.$el, settingsMapper.prepare.apply(settingsMapper, unmappedSettings));
	}

	/**
	 * Destroy the Handsontable instance.
	 *
	 * @param {Object} vueInstance The Vue component instance object.
	 */
	function hotDestroy(vueInstance) {
	  vueInstance.table.destroy();
	}

	/**
	 * Generate an object containing all the available Handsontable properties and plugin hooks (with the `on`-prefixes added).

	 * @returns {Object}
	 */
	function propFactory() {
	  var settingsMapper = new _settingsMapper2.default();
	  var currentSettings = _handsontable2.default.helper.clone(_handsontable2.default.DefaultSettings.prototype);
	  var registeredHooks = _handsontable2.default.hooks.getRegistered();

	  for (var prop in currentSettings) {
	    if (currentSettings.hasOwnProperty(prop)) {
	      currentSettings[prop] = {};
	    }
	  }

	  for (var i = 0; i < registeredHooks.length; i++) {
	    currentSettings[settingsMapper.addHookPrefix(registeredHooks[i])] = {};
	  }

	  currentSettings.root = {
	    'type': String,
	    'default': 'hot-' + new Date().getTime()
	  };

	  currentSettings.settings = {
	    'type': Object
	  };

	  return currentSettings;
	}

	/**
	 * Generate and object containing all the available Handsontable properties and hooks tied to the Handsontable updating function.
	 *
	 * @param {Function} updateFunction Function used to update a single changed property.
	 * @param {Function} bulkUpdateFunction Function used to update the whole `settings` object.
	 * @returns {Object}
	 */
	function propWatchFactory(updateFunction, bulkUpdateFunction) {
	  var props = propFactory();

	  var _loop = function _loop(prop) {
	    if (props.hasOwnProperty(prop)) {
	      if (prop === 'settings') {
	        props[prop] = {
	          handler: function handler() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	              args[_key] = arguments[_key];
	            }

	            return bulkUpdateFunction.call.apply(bulkUpdateFunction, [this, prop].concat(args));
	          },
	          deep: true
	        };
	      } else {
	        props[prop] = {
	          handler: function handler() {
	            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	              args[_key2] = arguments[_key2];
	            }

	            return updateFunction.call.apply(updateFunction, [this, prop].concat(args));
	          },
	          deep: true
	        };
	      }
	    }
	  };

	  for (var prop in props) {
	    _loop(prop);
	  }

	  return props;
	}

	// The `this` value in the functions below points to the Vue component instance. They're not meant to used anywhere but in the context of the component.

	/**
	 * Update the Handsontable instance with a single changed property.
	 *
	 * @param {String} updatedProperty Updated property name.
	 * @param {Object} updatedValue Watcher-generated updated value object.
	 * @param {Object} oldValue Watcher-generated old value object.
	 */
	function updateHotSettings(updatedProperty, updatedValue, oldValue) {
	  var newSettings = {};

	  newSettings[updatedProperty] = rewriteSettings(updatedValue);
	  this.table.updateSettings(newSettings);
	}

	/**
	 * Update the Handsontable instance with a whole changed `settings` property.
	 *
	 * @param {String} updatedProperty Updated property name.
	 * @param {Object} updatedValue Watcher-generated updated value object.
	 * @param {Object} oldValue Watcher-generated old value object.
	 */
	function updateBulkHotSettings(updatedProperty, updatedValue, oldValue) {
	  this.table.updateSettings(rewriteSettings(updatedValue));
	}

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = "\n<div :id=\"this.root\"></div>\n";

/***/ }
/******/ ]);
